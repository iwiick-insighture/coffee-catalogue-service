{
  "src/handlers/index.ts": "import { HttpStatusCode } from \"http-status-codes\";\nimport { Request, Response } from \"express\";\nimport { ApiResponse } from \"../common/api-response.dto\";\nimport {\n  addCoffee,\n  deleteCoffeeById,\n  getCoffeeById,\n  getCoffees,\n  updateCoffeeById,\n} from \"../services\";\nimport configData from \"../configs/config\";\nimport { getPrefixedUUID } from \"../utils\";\n\nexport const healthHandler = (_: Request, res: Response) => {\n  res.status(HttpStatusCode.OK).json({\n    message: `coffee-catalogue-svc is up and running on port :: ${configData.port}`, \n  } as ApiResponse);\n};\n\nexport const getAllCoffeesHandler = async (_: Request, res: Response) => {\n  try {\n    const data = await getCoffees();\n    res.status(HttpStatusCode.OK).json({\n      message: `All Coffees fetched`,\n      data,\n    } as ApiResponse);\n  } catch (err) {\n    res.status(HttpStatusCode.BAD_REQUEST).json({\n      success: false,\n      error: err.message,\n    } as ApiResponse);\n  }\n};\n\nexport const getCoffeeByIdHandler = async (req: Request, res: Response) => {\n  const { id } = req.params;\n  try {\n    const data = await getCoffeeById(id);\n    res.status(HttpStatusCode.OK).json({\n      message: `Coffee found by ID :: ${id}`, \n      data,\n    } as ApiResponse);\n  } catch (err) {\n    res.status(HttpStatusCode.BAD_REQUEST).json({\n      error: err.message,\n    } as ApiResponse);\n  }\n};\n\nexport const addCoffeeHandler = async (req: Request, res: Response) => {\n  const id = getPrefixedUUID();\n  const newCoffee = req.body;\n\n  if (!newCoffee.name) {\n    console.log(\n      `Missing Name in Coffee :: ${newCoffee.name.toLowerCase()}`\n    );\n  }\n\n  const data = await addCoffee({ ...newCoffee, id });\n  res.status(HttpStatusCode.OK).json({\n    message: `Added New Coffee`,\n    data,\n  } as ApiResponse);\n};\n\nexport const updateCoffeeHandler = async (req: Request, res: Response) => {\n  const { id } = req.params;\n  const updatedCoffee = req.body;\n  try {\n    const data = await updateCoffeeById(id, updatedCoffee);\n    res.status(HttpStatusCode.OK).json({\n      message: `Updated Coffee :: ${id}`, \n      data,\n    } as ApiResponse);\n  } catch (err) {\n    res.status(HttpStatusCode.BAD_REQUEST).json({\n      error: err.message,\n    } as ApiResponse);\n  }\n};\n\nexport const deleteCoffeeHandler = async (req: Request, res: Response) => {\n  const { id } = req.params;\n  try {\n    const data = await deleteCoffeeById(id);\n    res.status(HttpStatusCode.OK).json({\n      message: `Coffee Deleted :: ${id}`, \n      data,\n    } as ApiResponse);\n  } catch (err) {\n    res.status(HttpStatusCode.BAD_REQUEST).json({\n      error: err.message,\n    } as ApiResponse);\n  }\n};"
}
